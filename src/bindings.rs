/* automatically generated by rust-bindgen 0.65.1 */

pub const _TESTLIB_BOOL_TESTLIB_FALSE: _TESTLIB_BOOL = 0;
pub const _TESTLIB_BOOL_TESTLIB_TRUE: _TESTLIB_BOOL = 1;
pub type _TESTLIB_BOOL = ::std::os::raw::c_int;
pub use self::_TESTLIB_BOOL as TESTLIB_BOOL;
pub const _TESTLIB_PATTERN_PATTERN_AB: _TESTLIB_PATTERN = 0;
pub const _TESTLIB_PATTERN_PATTERN_XY: _TESTLIB_PATTERN = 1;
pub const _TESTLIB_PATTERN_PATTERN_TP: _TESTLIB_PATTERN = 2;
pub const _TESTLIB_PATTERN_PATTERN_NONE: _TESTLIB_PATTERN = 3;
pub type _TESTLIB_PATTERN = ::std::os::raw::c_int;
pub use self::_TESTLIB_PATTERN as TESTLIB_PATTERN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TESTLIB_INFO {
    pub Name: [::std::os::raw::c_char; 64usize],
    pub CameraID: ::std::os::raw::c_int,
    pub MaxHeight: ::std::os::raw::c_long,
    pub MaxWidth: ::std::os::raw::c_long,
    pub IsColorCam: TESTLIB_BOOL,
    pub BayerPattern: TESTLIB_PATTERN,
    pub pixelSize: f64,
}
#[test]
fn bindgen_test_layout__TESTLIB_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<_TESTLIB_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_TESTLIB_INFO>(),
        104usize,
        concat!("Size of: ", stringify!(_TESTLIB_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<_TESTLIB_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(_TESTLIB_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TESTLIB_INFO),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CameraID) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TESTLIB_INFO),
            "::",
            stringify!(CameraID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaxHeight) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TESTLIB_INFO),
            "::",
            stringify!(MaxHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaxWidth) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TESTLIB_INFO),
            "::",
            stringify!(MaxWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsColorCam) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_TESTLIB_INFO),
            "::",
            stringify!(IsColorCam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BayerPattern) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_TESTLIB_INFO),
            "::",
            stringify!(BayerPattern)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelSize) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_TESTLIB_INFO),
            "::",
            stringify!(pixelSize)
        )
    );
}
pub type TESTLIB_INFO = _TESTLIB_INFO;
extern "C" {
    pub fn testlib_getinfo(info: *mut TESTLIB_INFO) -> ::std::os::raw::c_int;
}
